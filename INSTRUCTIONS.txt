# Livestock Management System for Cassava (LMSC)

## Project Overview

LMSC is a comprehensive web-based management system designed to streamline the cassava supply chain, connecting farmers, processors, and transporters through a unified platform. The system facilitates inventory management, transportation coordination, and processing activities, providing real-time insights for all stakeholders.

## Table of Contents

1. [System Requirements](#system-requirements)
2. [Installation Guide](#installation-guide)
3. [System Architecture](#system-architecture)
4. [User Roles and Functionality](#user-roles-and-functionality)
5. [Database Schema](#database-schema)
6. [API Documentation](#api-documentation)
7. [Known Limitations](#known-limitations)
8. [Future Enhancements](#future-enhancements)

## System Requirements

- Node.js (v18.0.0 or higher)
- SQLite (included in the project)
- Modern web browser (Chrome, Firefox, Edge, Safari)
- npm or yarn package manager

## Installation Guide

### Step 1: Clone the Repository

```bash
git clone <repository-url>
cd lmsc
```

### Step 2: Install Dependencies

```bash
npm install
# or
yarn install
```

### Step 3: Set Up the Database

```bash
# Initialize the database with schema
npm run db:migrate

# Seed the database with initial data
npm run db:seed
```

### Step 4: Start the Development Server

```bash
npm run dev
# or
yarn dev
```

The application will be available at http://localhost:3000

### Step 5: Login with Demo Credentials

Use the following credentials to test different user roles:

- Admin:
  - Email: admin@cassava.com
  - Password: admin123

- Farmer:
  - Email: farmer@cassava.com
  - Password: farmer123

- Processor:
  - Email: processor@cassava.com
  - Password: processor123

- Transporter:
  - Email: transporter@cassava.com
  - Password: transporter123

## System Architecture

LMSC is built using the following technologies:

- **Frontend**: Next.js 13 with App Router, React, and Tailwind CSS
- **UI Components**: shadcn/ui component library
- **Backend**: Next.js API Routes with Server Actions
- **Database**: SQLite with Drizzle ORM
- **Authentication**: NextAuth.js for secure user authentication
- **State Management**: React Context API and React Hooks
- **Charting**: Recharts for data visualization

The system follows a client-server architecture with:
- Server-side rendering for improved performance and SEO
- API-based data fetching with server actions
- Responsive design for desktop and mobile devices

## User Roles and Functionality

### Admin

The admin has full access to the system and can:
- Manage user accounts across all roles
- View and manage warehouse inventory
- Track all orders and shipments
- Generate and download system-wide reports
- Configure system settings

### Farmer

Farmers can manage their cassava production and inventory:
- Track cassava inventory and quality
- Request transportation for harvested cassava
- View historical data on harvests and sales
- Monitor inventory levels across warehouses

### Processor

Processors can manage the processing of cassava:
- Place orders for raw cassava
- Track incoming deliveries
- Manage processing workflows
- Maintain inventory of processed products
- Generate reports on processing efficiency

### Transporter

Transporters handle the logistics between farmers and processors:
- View and manage transportation requests
- Update delivery status in real-time
- Track vehicle assignments
- Plan routes for efficient delivery
- Report delivery completion

## Database Schema

The database consists of the following main tables:

1. **Users**: Stores user account information with role-based access control
2. **Products**: Catalog of cassava products and varieties
3. **Inventory**: Tracks product quantities across warehouses
4. **Warehouses**: Stores information about physical storage locations
5. **Shipments**: Records transportation details between locations
6. **Orders**: Stores order information from processors
7. **OrderItems**: Contains line items for each order
8. **QualityMetrics**: Tracks quality assessments of cassava batches
9. **Sales**: Records historical sales data for reporting

## API Documentation

The system uses Next.js API routes and server actions to handle data operations. Key API endpoints include:

### Authentication
- `/api/auth/login`: User authentication
- `/api/auth/logout`: User logout
- `/api/auth/register`: New user registration

### Inventory Management
- `/api/inventory`: CRUD operations for inventory items
- `/api/products`: Product management
- `/api/warehouses`: Warehouse management

### Order Processing
- `/api/orders`: Order creation and management
- `/api/orders/[id]`: Individual order operations

### Transportation
- `/api/shipments`: Transportation request handling
- `/api/shipments/[id]/status`: Update shipment status

### Reporting
- `/api/reports/inventory`: Generate inventory reports
- `/api/reports/sales`: Generate sales reports

## Known Limitations

The current version of LMSC has the following limitations:

1. **Authentication System**: Uses simple authentication rather than a full OAuth system, which would be needed for a production environment.

2. **Data Validation**: Basic validation is implemented, but a production system would need more robust validation rules.

3. **Offline Support**: The system does not currently support offline operations, which could be crucial for rural areas with unstable internet connectivity.

4. **Mobile Experience**: While responsive, a dedicated mobile app would provide better experience for field operations.

5. **Performance**: The current architecture may not scale well for very large operations with thousands of users.

6. **Reporting**: Limited reporting capabilities compared to what would be required for a full business intelligence solution.

7. **Integration**: Lacks integration with external systems like payment gateways, ERP systems, or agricultural IoT devices.

## Future Enhancements

For a full-scale production deployment, the following enhancements would be recommended:

1. **Scalable Database**: Migrate from SQLite to a more robust database system like PostgreSQL or MySQL for production use.

2. **Advanced Authentication**: Implement OAuth 2.0 with multi-factor authentication and role-based permission system.

3. **Mobile App**: Develop dedicated mobile applications for Android and iOS to support field operations.

4. **Real-time Updates**: Implement WebSockets for real-time data synchronization between users.

5. **Offline Support**: Add offline capabilities using service workers and local storage.

6. **Advanced Analytics**: Integrate with business intelligence tools for advanced reporting and predictive analytics.

7. **Supply Chain Traceability**: Implement blockchain-based traceability for complete supply chain transparency.

8. **Integration Ecosystem**: Build API integrations with financial services, weather forecasting, and agricultural systems.

9. **Notifications System**: Add push notifications, SMS alerts, and email notifications for important events.

10. **Localization**: Support for multiple languages and regional units of measurement.

11. **Compliance and Certification**: Add features to track compliance with agricultural regulations and certification requirements.

12. **Machine Learning**: Implement predictive models for harvest forecasting, quality prediction, and demand planning. 